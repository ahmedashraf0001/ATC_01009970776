@using Event_ui.DTOs.Categories
@model CategoryPageViewModel
@{
    ViewData["Title"] = "Panel";
    Layout = "~/Views/Shared/AdminLayout.cshtml";
}
<style>
    .pagination-button.active {
        background-color: var(--danger);
        color: white;
        font-weight: bold;
    }

    .pagination-button {
        color: var(--danger);
    }

    .validation-error-container {
        background-color: #fef2f2;
        border-left: 4px solid #ef4444;
        border-radius: 6px;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        margin: 16px 0;
        overflow: hidden;
    }

    .validation-error-header {
        background-color: rgba(239, 68, 68, 0.1);
        color: #b91c1c;
        display: flex;
        align-items: center;
        padding: 12px 16px;
        font-weight: 600;
        border-bottom: 1px solid rgba(239, 68, 68, 0.2);
    }

        .validation-error-header svg {
            margin-right: 10px;
            color: #b91c1c;
        }

    .validation-error-list {
        list-style-type: none;
        margin: 0;
        padding: 12px 16px;
    }

    .validation-error-item {
        color: #b91c1c;
        padding: 6px 0;
        display: flex;
        align-items: flex-start;
        position: relative;
    }

        .validation-error-item:before {
            content: "•";
            color: #ef4444;
            font-weight: bold;
            display: inline-block;
            width: 16px;
            margin-right: 4px;
        }

        .validation-error-item:not(:last-child) {
            border-bottom: 1px dashed rgba(239, 68, 68, 0.2);
        }

    .error-field {
        font-weight: 600;
        margin-right: 4px;
    }

    .no-events {
        text-align: center;
        margin: 40px auto;
        padding: 30px;
        border: 2px dashed #ccc;
        background-color: #f9f9f9;
        color: #666;
        border-radius: 10px;
        max-width: 500px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
        transition: all 0.3s ease-in-out;
    }

        .no-events h3 {
            font-size: 24px;
            margin-bottom: 10px;
            color: #333;
        }

        .no-events p {
            font-size: 16px;
            line-height: 1.5;
        }
</style>
<div class="tab-content" id="events">
    <div class="content-header">
        <h3 class="content-title">Manage Categories</h3>
        <button class="btn btn-primary" onclick="openModal('addEventModal')">Add New Category</button>
    </div>

    <div class="table-container">
        <table>
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Category Name</th>
                    <th>Events Count</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody id="eventsTableBody">
                @foreach (var item in Model.Categories)
                {
                    <tr>
                        <td>@item.Id</td>
                        <td>@item.Name</td>
                        <td>@item.Event_List.Count</td>
                        <td>
                            <div class="action-buttons">
                                <button class="btn btn-outline"
                                        onclick='editEvent(@Html.Raw(Json.Serialize(new {
                                    id = item.Id,
                                    name = item.Name,
                                })))'>
                                    Edit
                                </button>

                                <button class="btn btn-danger" onclick="confirmDeleteEvent('@item.Name')">Delete</button>
                            </div>
                        </td>
                    </tr>
                }

            </tbody>
        </table>
    </div>
    @if (Model.Categories.Count == 0)
    {
        <div class="no-events">
            <h3>No Categories Found</h3>
            <p>There are currently no Categories available. Please check back later.</p>
        </div>
    }
    else if (Model.TotalCount > Model.PageSize)
    {
        <div class="pagination">
            @{
                int totalPages = (int)Math.Ceiling((double)Model.TotalCount / Model.PageSize);
                int currentPage = Model.PageNumber;
                int maxPagesToShow = 5;

                int startPage = Math.Max(1, currentPage - (maxPagesToShow / 2));
                int endPage = Math.Min(totalPages, startPage + maxPagesToShow - 1);

                if (endPage - startPage + 1 < maxPagesToShow)
                {
                    startPage = Math.Max(1, endPage - maxPagesToShow + 1);
                }

                <button class="pagination-button @(currentPage == 1 ? "disabled" : "")"
                @(currentPage == 1 ? "disabled" : "")
                        onclick="location.href='@Url.Action("Panal", new { pageNumber = 1, pageSize = Model.PageSize})'">
                    &laquo;
                </button>

                <button class="pagination-button @(currentPage == 1 ? "disabled" : "")"
                @(currentPage == 1 ? "disabled" : "")
                        onclick="location.href='@Url.Action("Panal", new { pageNumber = currentPage - 1, pageSize = Model.PageSize })'">
                    &larr;
                </button>

                if (startPage > 1)
                {
                    <button class="pagination-button btn btn-danger"
                            onclick="location.href='@Url.Action("Panal", new { pageNumber = 1, pageSize = Model.PageSize })'">
                        1
                    </button>

                    if (startPage > 2)
                    {
                        <span class="pagination-button disabled">...</span>
                    }
                }

                for (int i = startPage; i <= endPage; i++)
                {
                    <button class="pagination-button @(i == currentPage ? " active " : "")"
                            onclick="location.href='@Url.Action("Panal", new { pageNumber = i, pageSize = Model.PageSize })'">
                        @i
                    </button>
                }

                if (endPage < totalPages)
                {
                    if (endPage < totalPages - 1)
                    {
                        <span class="pagination-button disabled">...</span>
                    }

                    <button class="pagination-button"
                            onclick="location.href='@Url.Action("Panal", new { pageNumber = totalPages, pageSize = Model.PageSize})'">
                        @totalPages
                    </button>
                }

                <button class="pagination-button @(currentPage == totalPages ? "disabled" : "")"
                @(currentPage == totalPages ? "disabled" : "")
                        onclick="location.href='@Url.Action("Panal", new { pageNumber = currentPage + 1, pageSize = Model.PageSize})'">
                    &rarr;
                </button>

                <button class="pagination-button @(currentPage == totalPages ? "disabled" : "")"
                @(currentPage == totalPages ? "disabled" : "")
                        onclick="location.href='@Url.Action( "Panal", new { pageNumber = totalPages, pageSize = Model.PageSize})'">
                    &raquo;
                </button>
            }
        </div>

        <div class="pagination-info">
            <span>Showing @((Model.PageNumber - 1) * Model.PageSize + 1) - @Math.Min(Model.PageNumber * Model.PageSize, Model.TotalCount) of @Model.TotalCount results</span>
        </div>
    }

</div>

<div class="modal" id="addEventModal">
    <div class="modal-content">
        <div class="modal-header">
            <h3 class="modal-title">Add New Category</h3>
            <button class="close-btn" onclick="closeModal('addEventModal')">&times;</button>
        </div>
        <form id="addEventForm" class="modal-body" method="post" asp-controller="Category" asp-action="Add">
            <div class="form-group">
                <label for="addEventName">Category Name</label>
                <input type="text" id="addEventName" name="name" class="form-control" placeholder="Enter Category Name">
            </div>       
            <div class="modal-footer">
                <button type="button" class="btn btn-outline" onclick="closeModal('deleteEventModal')">Cancel</button>
                <button type="submit" class="btn btn-danger">Add Category</button>
            </div>
        </form>
    </div>
</div>


<div class="modal" id="editEventModal">
    <div class="modal-content">
        <div class="modal-header">
            <h3 class="modal-title">Edit Category</h3>
            <button class="close-btn" onclick="closeModal('editEventModal')">&times;</button>
        </div>
        <form id="editEventForm" class="modal-body" method="post" asp-controller="Category" asp-action="Edit">
            <input type="hidden" id="editEventId" name="id">
            <div class="form-group">
                <label for="editEventName">Category Name</label>
                <input type="text" id="editEventName" name="request" class="form-control">
            </div>    
            <div class="modal-footer">
                <button type="button" class="btn btn-outline" onclick="closeModal('deleteEventModal')">Cancel</button>
                <button type="submit" class="btn btn-danger">Edit Category</button>
            </div>
        </form>
    </div>
</div>

<div class="modal delete-modal" id="deleteEventModal">
    <div class="modal-content">
        <div class="modal-header">
            <h3 class="modal-title">Delete Category</h3>
            <button class="close-btn" onclick="closeModal('deleteEventModal')">&times;</button>
        </div>
        <form method="post" asp-controller="Category" asp-action="Delete">
            <div class="modal-body">
                <p>Are you sure you want to delete this Category? This action cannot be undone.</p>
                <input type="hidden" id="deleteEventId" name="name">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline" onclick="closeModal('deleteEventModal')">Cancel</button>
                <button type="submit" class="btn btn-danger">Delete Category</button>
            </div>
        </form>
    </div>
</div>

@if (!ViewData.ModelState.IsValid)
{
    <div class="validation-error-container">
        <div class="validation-error-header">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <circle cx="12" cy="12" r="10"></circle>
                <line x1="12" y1="8" x2="12" y2="12"></line>
                <line x1="12" y1="16" x2="12.01" y2="16"></line>
            </svg>
            <span>Please correct the following errors:</span>
        </div>
        <ul class="validation-error-list">
            @Html.ValidationSummary(true, "", new { @class = "validation-error-item" })
        </ul>
    </div>
}

<script>
    function openModal(modalId) {
        document.getElementById(modalId).style.display = 'flex';
    }

    function closeModal(modalId) {
        document.getElementById(modalId).style.display = 'none';
    }

     async function editEvent(event) {
        console.log(event);

        currentEventId = event.id;
        document.getElementById('editEventId').value = event.name;
        document.getElementById('editEventName').value = event.name;

        openModal('editEventModal');
    }

    function confirmDeleteEvent(eventId) {
        document.getElementById('deleteEventId').value = eventId;
        openModal('deleteEventModal');
    }

    window.onclick = function(event) {
        const modals = document.getElementsByClassName('modal');
        for (let i = 0; i < modals.length; i++) {
            if (event.target == modals[i]) {
                modals[i].style.display = 'none';
            }
        }
    }

</script>

