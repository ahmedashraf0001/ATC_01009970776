// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using event_booking_system.Common.Context;

#nullable disable

namespace event_booking_system.Migrations
{
    [DbContext(typeof(AppContextDb))]
    partial class AppContextDbModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("event_booking_system.Common.Entites.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdmissionTicketQty")
                        .HasColumnType("int");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TicketType")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("VipTicketQty")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdmissionTicketQty = 2,
                            BookingDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EventId = 1,
                            Status = 0,
                            TicketType = 2,
                            UserId = "1",
                            VipTicketQty = 1
                        },
                        new
                        {
                            Id = 2,
                            AdmissionTicketQty = 4,
                            BookingDate = new DateTime(2023, 12, 27, 0, 0, 0, 0, DateTimeKind.Utc),
                            EventId = 2,
                            Status = 1,
                            TicketType = 0,
                            UserId = "2",
                            VipTicketQty = 0
                        },
                        new
                        {
                            Id = 3,
                            AdmissionTicketQty = 1,
                            BookingDate = new DateTime(2023, 12, 22, 0, 0, 0, 0, DateTimeKind.Utc),
                            EventId = 3,
                            Status = 2,
                            TicketType = 0,
                            UserId = "3",
                            VipTicketQty = 0
                        },
                        new
                        {
                            Id = 4,
                            AdmissionTicketQty = 3,
                            BookingDate = new DateTime(2023, 12, 29, 0, 0, 0, 0, DateTimeKind.Utc),
                            EventId = 4,
                            Status = 1,
                            TicketType = 0,
                            UserId = "4",
                            VipTicketQty = 0
                        },
                        new
                        {
                            Id = 5,
                            AdmissionTicketQty = 2,
                            BookingDate = new DateTime(2023, 12, 25, 0, 0, 0, 0, DateTimeKind.Utc),
                            EventId = 5,
                            Status = 1,
                            TicketType = 2,
                            UserId = "1",
                            VipTicketQty = 1
                        });
                });

            modelBuilder.Entity("event_booking_system.Common.Entites.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Music"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Sports"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Theater"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Comedy"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Conference"
                        });
                });

            modelBuilder.Entity("event_booking_system.Common.Entites.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AdmissionPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("AdmissionTicketQty")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("VipPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("VipTicketQty")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedById");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdmissionPrice = 50m,
                            AdmissionTicketQty = 200,
                            CategoryId = 1,
                            CreatedById = "1",
                            Date = new DateTime(2024, 1, 31, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "A thrilling rock concert with top bands.",
                            ImageUrl = "uploads/Rock Concert.jpeg",
                            Location = "Cairo Arena",
                            Title = "Rock Concert",
                            VipPrice = 150m,
                            VipTicketQty = 100
                        },
                        new
                        {
                            Id = 2,
                            AdmissionPrice = 30m,
                            AdmissionTicketQty = 500,
                            CategoryId = 2,
                            CreatedById = "2",
                            Date = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "A thrilling football match between the top teams.",
                            ImageUrl = "uploads/football.jpeg",
                            Location = "Football Stadium",
                            Title = "Football Match",
                            VipPrice = 100m,
                            VipTicketQty = 300
                        },
                        new
                        {
                            Id = 3,
                            AdmissionPrice = 40m,
                            AdmissionTicketQty = 150,
                            CategoryId = 3,
                            CreatedById = "3",
                            Date = new DateTime(2024, 3, 31, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "A stunning rendition of Shakespeare's Hamlet.",
                            ImageUrl = "uploads/Shakespeare Play.jpg",
                            Location = "London Theater",
                            Title = "Shakespeare Play",
                            VipPrice = 120m,
                            VipTicketQty = 50
                        },
                        new
                        {
                            Id = 4,
                            AdmissionPrice = 20m,
                            AdmissionTicketQty = 300,
                            CategoryId = 4,
                            CreatedById = "4",
                            Date = new DateTime(2024, 4, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Laugh-out-loud comedy with top comedians.",
                            ImageUrl = "uploads/Stand-up Comedy Show.jpeg",
                            Location = "LA Comedy Club",
                            Title = "Stand-up Comedy Show",
                            VipPrice = 80m,
                            VipTicketQty = 100
                        },
                        new
                        {
                            Id = 5,
                            AdmissionPrice = 75m,
                            AdmissionTicketQty = 400,
                            CategoryId = 5,
                            CreatedById = "2",
                            Date = new DateTime(2024, 5, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Learn the latest in technology from industry leaders.",
                            ImageUrl = "uploads/Tech Conference.jpeg",
                            Location = "Tech Convention Center",
                            Title = "Tech Conference",
                            VipPrice = 200m,
                            VipTicketQty = 150
                        },
                        new
                        {
                            Id = 6,
                            AdmissionPrice = 50m,
                            AdmissionTicketQty = 200,
                            CategoryId = 1,
                            CreatedById = "1",
                            Date = new DateTime(2024, 1, 31, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "A thrilling rock concert with top bands.",
                            ImageUrl = "uploads/Rock Concert.jpeg",
                            Location = "Cairo Arena",
                            Title = "Rock Concert",
                            VipPrice = 150m,
                            VipTicketQty = 100
                        },
                        new
                        {
                            Id = 7,
                            AdmissionPrice = 30m,
                            AdmissionTicketQty = 500,
                            CategoryId = 2,
                            CreatedById = "2",
                            Date = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "A thrilling football match between the top teams.",
                            ImageUrl = "uploads/football.jpeg",
                            Location = "Football Stadium",
                            Title = "Football Match",
                            VipPrice = 100m,
                            VipTicketQty = 300
                        },
                        new
                        {
                            Id = 8,
                            AdmissionPrice = 40m,
                            AdmissionTicketQty = 150,
                            CategoryId = 3,
                            CreatedById = "3",
                            Date = new DateTime(2024, 3, 31, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "A stunning rendition of Shakespeare's Hamlet.",
                            ImageUrl = "uploads/Shakespeare Play.jpg",
                            Location = "London Theater",
                            Title = "Shakespeare Play",
                            VipPrice = 120m,
                            VipTicketQty = 50
                        },
                        new
                        {
                            Id = 9,
                            AdmissionPrice = 20m,
                            AdmissionTicketQty = 300,
                            CategoryId = 4,
                            CreatedById = "4",
                            Date = new DateTime(2024, 4, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Laugh-out-loud comedy with top comedians.",
                            ImageUrl = "uploads/Stand-up Comedy Show.jpeg",
                            Location = "LA Comedy Club",
                            Title = "Stand-up Comedy Show",
                            VipPrice = 80m,
                            VipTicketQty = 100
                        },
                        new
                        {
                            Id = 10,
                            AdmissionPrice = 50m,
                            AdmissionTicketQty = 200,
                            CategoryId = 1,
                            CreatedById = "1",
                            Date = new DateTime(2024, 1, 31, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "A thrilling rock concert with top bands.",
                            ImageUrl = "uploads/Rock Concert.jpeg",
                            Location = "Cairo Arena",
                            Title = "Rock Concert",
                            VipPrice = 150m,
                            VipTicketQty = 100
                        },
                        new
                        {
                            Id = 11,
                            AdmissionPrice = 30m,
                            AdmissionTicketQty = 500,
                            CategoryId = 2,
                            CreatedById = "2",
                            Date = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "A thrilling football match between the top teams.",
                            ImageUrl = "uploads/football.jpeg",
                            Location = "Football Stadium",
                            Title = "Football Match",
                            VipPrice = 100m,
                            VipTicketQty = 300
                        },
                        new
                        {
                            Id = 12,
                            AdmissionPrice = 40m,
                            AdmissionTicketQty = 150,
                            CategoryId = 3,
                            CreatedById = "3",
                            Date = new DateTime(2024, 3, 31, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "A stunning rendition of Shakespeare's Hamlet.",
                            ImageUrl = "uploads/Shakespeare Play.jpg",
                            Location = "London Theater",
                            Title = "Shakespeare Play",
                            VipPrice = 120m,
                            VipTicketQty = 50
                        },
                        new
                        {
                            Id = 13,
                            AdmissionPrice = 20m,
                            AdmissionTicketQty = 300,
                            CategoryId = 4,
                            CreatedById = "4",
                            Date = new DateTime(2024, 4, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Laugh-out-loud comedy with top comedians.",
                            ImageUrl = "uploads/Stand-up Comedy Show.jpeg",
                            Location = "LA Comedy Club",
                            Title = "Stand-up Comedy Show",
                            VipPrice = 80m,
                            VipTicketQty = 100
                        },
                        new
                        {
                            Id = 14,
                            AdmissionPrice = 75m,
                            AdmissionTicketQty = 400,
                            CategoryId = 5,
                            CreatedById = "2",
                            Date = new DateTime(2024, 5, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Learn the latest in technology from industry leaders.",
                            ImageUrl = "uploads/Tech Conference.jpeg",
                            Location = "Tech Convention Center",
                            Title = "Tech Conference",
                            VipPrice = 200m,
                            VipTicketQty = 150
                        },
                        new
                        {
                            Id = 15,
                            AdmissionPrice = 50m,
                            AdmissionTicketQty = 200,
                            CategoryId = 1,
                            CreatedById = "1",
                            Date = new DateTime(2024, 1, 31, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "A thrilling rock concert with top bands.",
                            ImageUrl = "uploads/Rock Concert.jpeg",
                            Location = "Cairo Arena",
                            Title = "Rock Concert",
                            VipPrice = 150m,
                            VipTicketQty = 100
                        },
                        new
                        {
                            Id = 16,
                            AdmissionPrice = 30m,
                            AdmissionTicketQty = 500,
                            CategoryId = 2,
                            CreatedById = "2",
                            Date = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "A thrilling football match between the top teams.",
                            ImageUrl = "uploads/football.jpeg",
                            Location = "Football Stadium",
                            Title = "Football Match",
                            VipPrice = 100m,
                            VipTicketQty = 300
                        },
                        new
                        {
                            Id = 17,
                            AdmissionPrice = 40m,
                            AdmissionTicketQty = 150,
                            CategoryId = 3,
                            CreatedById = "3",
                            Date = new DateTime(2024, 3, 31, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "A stunning rendition of Shakespeare's Hamlet.",
                            ImageUrl = "uploads/Shakespeare Play.jpg",
                            Location = "London Theater",
                            Title = "Shakespeare Play",
                            VipPrice = 120m,
                            VipTicketQty = 50
                        },
                        new
                        {
                            Id = 18,
                            AdmissionPrice = 20m,
                            AdmissionTicketQty = 300,
                            CategoryId = 4,
                            CreatedById = "4",
                            Date = new DateTime(2024, 4, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Laugh-out-loud comedy with top comedians.",
                            ImageUrl = "uploads/Stand-up Comedy Show.jpeg",
                            Location = "LA Comedy Club",
                            Title = "Stand-up Comedy Show",
                            VipPrice = 80m,
                            VipTicketQty = 100
                        },
                        new
                        {
                            Id = 19,
                            AdmissionPrice = 40m,
                            AdmissionTicketQty = 150,
                            CategoryId = 3,
                            CreatedById = "3",
                            Date = new DateTime(2024, 3, 31, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "A stunning rendition of Shakespeare's Hamlet.",
                            ImageUrl = "uploads/Shakespeare Play.jpg",
                            Location = "London Theater",
                            Title = "Shakespeare Play",
                            VipPrice = 120m,
                            VipTicketQty = 50
                        });
                });

            modelBuilder.Entity("event_booking_system.Common.Entites.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Bio")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateJoined")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Role")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            Address = "Cairo, Egypt",
                            ConcurrencyStamp = "9a6f32ea-d89c-4098-badd-a4ad95fd31ed",
                            DateJoined = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "ahmedashraf@example.com",
                            EmailConfirmed = false,
                            FirstName = "Ahmed",
                            LastName = "Ashraf",
                            LockoutEnabled = false,
                            PhoneNumber = "01009970776",
                            PhoneNumberConfirmed = false,
                            Role = 1,
                            SecurityStamp = "2b24c537-4d15-4eba-a2b7-0eb7eedc0eaf",
                            TwoFactorEnabled = false,
                            UserName = "ahmedashraf"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            Address = "New York, USA",
                            ConcurrencyStamp = "253b12d9-54ea-47d9-abaa-39cec33041a0",
                            DateJoined = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "johndoe@example.com",
                            EmailConfirmed = false,
                            FirstName = "John",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            PhoneNumber = "01234567890",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "4cb67efd-9d90-49ff-9795-032b5e3a312b",
                            TwoFactorEnabled = false,
                            UserName = "johndoe"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            Address = "London, UK",
                            ConcurrencyStamp = "3355fcc1-c994-4063-88e7-85c944c75e25",
                            DateJoined = new DateTime(2023, 12, 2, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "sarah.smith@example.com",
                            EmailConfirmed = false,
                            FirstName = "Sarah",
                            LastName = "Smith",
                            LockoutEnabled = false,
                            PhoneNumber = "01122334455",
                            PhoneNumberConfirmed = false,
                            Role = 1,
                            SecurityStamp = "7b51fbc4-c070-4d32-866d-05dce4b77077",
                            TwoFactorEnabled = false,
                            UserName = "sarahsmith"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            Address = "Los Angeles, USA",
                            ConcurrencyStamp = "e9317caf-ce39-48cc-8944-63106d004444",
                            DateJoined = new DateTime(2023, 11, 2, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "emily.brown@example.com",
                            EmailConfirmed = false,
                            FirstName = "Emily",
                            LastName = "Brown",
                            LockoutEnabled = false,
                            PhoneNumber = "01658748391",
                            PhoneNumberConfirmed = false,
                            Role = 1,
                            SecurityStamp = "e9767dd3-74f9-4952-bc96-2dfbe438de06",
                            TwoFactorEnabled = false,
                            UserName = "emilybrown"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("event_booking_system.Common.Entites.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("event_booking_system.Common.Entites.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("event_booking_system.Common.Entites.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("event_booking_system.Common.Entites.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("event_booking_system.Common.Entites.Booking", b =>
                {
                    b.HasOne("event_booking_system.Common.Entites.Event", "Event")
                        .WithMany("Bookings")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("event_booking_system.Common.Entites.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("event_booking_system.Common.Entites.Event", b =>
                {
                    b.HasOne("event_booking_system.Common.Entites.Category", "Category")
                        .WithMany("Events")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("event_booking_system.Common.Entites.User", "CreatedBy")
                        .WithMany("CreatedEvents")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("event_booking_system.Common.Entites.Category", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("event_booking_system.Common.Entites.Event", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("event_booking_system.Common.Entites.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("CreatedEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
